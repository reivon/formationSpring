tuto plante : http://yannart.developpez.com/java/spring/tutoriel/
tuto web : http://rpouiller.developpez.com/tutoriels/spring/application-web-spring-hibernate/

spring framework : http://projects.spring.io/spring-framework/
getting started : https://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview-getting-started-with-spring.html


todo : appel ajax en mvc


###  3. spring mvc




 3.6 gérer un formulaire

    exemple du projet formationspring_8 :
    pour gérer un formulaire on a un objet "command" qui attend un bean (attention aux setter / getter)
    mais il est possible de paramétrer le nom du bean attaché au formulaire via l'attribut modelattribute.
    lors du submit, on récupère tout simplement cet objet en signature de méthode

 3.7 spring message & internationalisation

    exemple du projet formationspring_9 :

    ordre de priorité :
        application_fr_fr
        application_fr
        application

    on a ajouté un resolver ainsi qu'un interceptor, via l'url on peut changer la locale.
        http://localhost:8080/student
        http://localhost:8080/student?locale=en
    de manière native c'est géré par le accept language de la requête http.

    pour gérer des fichiers externe à l'application ?
        <value>file:/usr/local/conf/app/messages/messages</value>

    pour récupérer les messages : spring:message
    dans un controller injecter le bean.


 3.8 gérer un formulaire avec validation

    avant la version 4 et après la 3 => librairie externe : jsr-303/jsr-349 bean validation notamment avec
        <dependency>
            <groupid>javax.validation</groupid>
            <artifactid>validation-api</artifactid>
            <version>1.0.0.ga</version>
        </dependency>
        <dependency>
            <groupid>org.hibernate</groupid>
            <artifactid>hibernate-validator</artifactid>
            <version>4.1.0.final</version>
        </dependency>
    exemple dans ce lien : http://blog.netapsys.fr/spring-mvc-formulaires-et-validations-par-la-norme-jsr-303-bean-validation/

    après la version 4 => spring intégre cette norme à sa sauce @validated (http://www.mkyong.com/spring-mvc/spring-mvc-form-handling-example/)
    exemple du projet formationspring_10 :

    c'est le même projet que 8 avec les étudiants mais avec une validation.
        on rajoute l'email pour montrer les dépendances de validator.
        ajout de deux validator
        ajout du tag form:error dans la jsp du formulaire
        modification du controller pour déclencher le validator
        détail sur le messageressource => on a plusieurs fichiers de messageresource maintenant.
            note : il y a un ordre d'application. le dernier prend le pas sur les suivant.
            permet de faire du fallback. on charge d'abord le fichier dans l'appli puis un externe par exemple.

    attention ! dans le controller, l'attribut bindingresult result doit obligatoirement être placé juste après le modelattribute à valider.
    sinon erreur 400 ! c'est le seul paramètre qui a une place conditionné au niveau des controlleurs spring.
    => http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-methods


 3.8 utf-8 encoding

    petit détail dans le projet 10, l'encoding filter a été ajouté dans le web.xml
    permet de filtrer toutes les transactions http pour notamment récupérer les données formulaires en utf-8

4. spring security

    4.1 exemple sur le projet formationspring_11 :
        ajout de dépendance dans le web.xml (attention, version différente de spring core)
        on ajoute le filtre de spring security dans le web.xml
        on crée le fichier de configuration de spring security
        test d'accès :
            localhost:8080/welcome
            localhost:8080/admin
        la login page est par défaut.
        spring 4 demande de gérer des tokens crslf

    4.2 exemple sur le projet formationspring_12 :
        ajout d'une page de login
        déclaration controller login
        ajout page login
        le logout est géré par login?logout automatiquement
        l'erreur de log est géré par login?error automatiquement
        username et password doivent être présent


http://docs.spring.io/spring-security/site/docs/current/guides/html5//
spring with java config : http://docs.spring.io/spring-security/site/docs/current/guides/html5//helloworld-javaconfig.html
spring with mvc java config : http://docs.spring.io/spring-security/site/docs/current/guides/html5//hellomvc-javaconfig.html


exemple basé sur spring security basic (form login auto généré) : http://www.mkyong.com/spring-security/spring-security-hello-world-example/
exemple basé sur custom form login : http://www.mkyong.com/spring-security/spring-security-form-login-example/
exemple basé sur basic authen : https://www.mkyong.com/spring-security/spring-security-http-basic-authentication-example/


5. spring test + junit


6. spring batch


7. les bonus
 7.1 aop

    -- beanpostprocessor

    spring recherche automatiquement toutes les classes héritant de beanpostprocessor
    @component
    public class inithelloworld implements beanpostprocessor {
       public object postprocessbeforeinitialization(object bean, string beanname) throws beansexception {
          system.out.println("beforeinitialization : " + beanname);
          return bean;  // you can return any other object as well
       }
       public object postprocessafterinitialization(object bean, string beanname) throws beansexception {
          system.out.println("afterinitialization : " + beanname);
          return bean;  // you can return any other object as well
       }
    }

    bien appeler context.registershutdownhook(); dans le main pour pouvoir lancer correctement les destroy.
        (a combiner avec les init méthod et destroy method)


    -- aspectj

    <!-- annotations pour aop -->
	<aop:aspectj-autoproxy />

    http://www.tutorialspoint.com/spring/aop_with_spring.htm


 7.2 spring boot


 7.3 topo sur les autres modules

    on peut gérer
        - du cache (ehcache)
        - du cron / quartz
        - du jdbc / jpa
        - mail
        - jms
        - rest
        - ...



### 8. petit quiz pour réaliser un résumé / rappel

    http://www.tutorialspoint.com/spring/spring_mock_test.htm




### 9. lien divers :

 la bible : http://www.mkyong.com/
 www.spring.io
 http://www.tutorialspoint.com/spring/
 http://yannart.developpez.com/java/spring/tutoriel/
