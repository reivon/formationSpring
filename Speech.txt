tuto plante : http://yannart.developpez.com/java/spring/tutoriel/
tuto web : http://rpouiller.developpez.com/tutoriels/spring/application-web-spring-hibernate/

spring framework : http://projects.spring.io/spring-framework/
getting started : https://docs.spring.io/spring/docs/current/spring-framework-reference/html/overview-getting-started-with-spring.html


todo : appel ajax en mvc


###  3. spring mvc


4. spring security

    4.1 exemple sur le projet formationspring_11 :
        ajout de dépendance dans le web.xml (attention, version différente de spring core)
        on ajoute le filtre de spring security dans le web.xml
        on crée le fichier de configuration de spring security
        test d'accès :
            localhost:8080/welcome
            localhost:8080/admin
        la login page est par défaut.
        spring 4 demande de gérer des tokens crslf

    4.2 exemple sur le projet formationspring_12 :
        ajout d'une page de login
        déclaration controller login
        ajout page login
        le logout est géré par login?logout automatiquement
        l'erreur de log est géré par login?error automatiquement
        username et password doivent être présent


http://docs.spring.io/spring-security/site/docs/current/guides/html5//
spring with java config : http://docs.spring.io/spring-security/site/docs/current/guides/html5//helloworld-javaconfig.html
spring with mvc java config : http://docs.spring.io/spring-security/site/docs/current/guides/html5//hellomvc-javaconfig.html


exemple basé sur spring security basic (form login auto généré) : http://www.mkyong.com/spring-security/spring-security-hello-world-example/
exemple basé sur custom form login : http://www.mkyong.com/spring-security/spring-security-form-login-example/
exemple basé sur basic authen : https://www.mkyong.com/spring-security/spring-security-http-basic-authentication-example/


5. spring test + junit


6. spring batch


7. les bonus
 7.1 aop

    -- beanpostprocessor

    spring recherche automatiquement toutes les classes héritant de beanpostprocessor
    @component
    public class inithelloworld implements beanpostprocessor {
       public object postprocessbeforeinitialization(object bean, string beanname) throws beansexception {
          system.out.println("beforeinitialization : " + beanname);
          return bean;  // you can return any other object as well
       }
       public object postprocessafterinitialization(object bean, string beanname) throws beansexception {
          system.out.println("afterinitialization : " + beanname);
          return bean;  // you can return any other object as well
       }
    }

    bien appeler context.registershutdownhook(); dans le main pour pouvoir lancer correctement les destroy.
        (a combiner avec les init méthod et destroy method)


    -- aspectj

    <!-- annotations pour aop -->
	<aop:aspectj-autoproxy />

    http://www.tutorialspoint.com/spring/aop_with_spring.htm


 7.2 spring boot


 7.3 topo sur les autres modules

    on peut gérer
        - du cache (ehcache)
        - du cron / quartz
        - du jdbc / jpa
        - mail
        - jms
        - rest
        - ...



### 8. petit quiz pour réaliser un résumé / rappel

    http://www.tutorialspoint.com/spring/spring_mock_test.htm




### 9. lien divers :

 la bible : http://www.mkyong.com/
 www.spring.io
 http://www.tutorialspoint.com/spring/
 http://yannart.developpez.com/java/spring/tutoriel/
